:toc: macro
toc::[]

= Order Service -Security

In this chapter we are going to configure authorization and authentication for our services. We will learn how to create permission and roles, how to grant theme and how to apply permisions to business logic which need to be protected.

== Basic configuration

As you have probably already find out basic security configuration is already done. It was done at the very begining during creation of application from archetype. Many interesting information can be found in following classes:
[source,java]
----
com.devonfw.app.java.order.general.service.impl.config.BaseWebSecurityConfig
com.devonfw.app.java.order.general.common.impl.security.BaseUserDetailsService
----

Please read this file carefully and try to understand what is configured there. What is going on. Please try to find out places how and from where users are retrieved based on username. Determine a place how roles are determined for user right now. Consider if it will be enough in future. Please also take a look at something like AccessControlProvider.

== Authorization

Configuration of authorization can be done in multiple way. Spring by default base on roles. User has assign to some roles. Common situation is that when we want to protect a logic we don't want to do it by role but a separate privilige. We want to use groups of permission, inheritance and so one. This framework already provide for us such functionality.

=== Access Control Config
This is new approach. In this method we need to extend AccessControlConfig class. Entire configuration is done in code. We need to define groups, permissions. We are able to inheritance from other group as well as define new ones. In generated project basic configuration can be found under:
----
com.devonfw.app.java.order.general.common.api.security.ApplicationAccessControlConfig
----

=== Access Control Schema
This is second possible approach. Currently it is deprecated. Idea is the same as in previous method. The only difference is that all roles/groups and so on is configured in file file access-control-schema.xml. When configured to be able to easily use theme in code we are able to use cobigen to generate PermissionConstants class with defined permissions.

More details about this methods can be found under:
https://github.com/devonfw/devon4j/wiki/guide-access-control

== Exercises

. Basic configuration

* Prepare permissions for your business logic using Access Control Schema method. To do that please modify file access-control-schema.xml appropriate. Examples you can find in link above. Use names appropriate to implemented use cases.
** Please use inheritance of permissions.
* After that use CobiGen to generate from file access-control-schema.xml PermissionConstants.java which can be used to protect our UseCases.
* In the class OrderserviceImpl use the @RolesAllowed annotation and the new permissions to grant access to the desired group of users
* Users currently are defined in class BaseWebSecurityConfig->configureGlobal. Please note that when method roles is used then prefix ROLE_ is added automaticly (then all users will have roles like ROLE_Cook). To avoid it you can use method authorities instead to avoid it.
* Even role are configured they are still not used. Please look to file BaseUserDetailsService->getRoles. This implementation assign for every User one role - username. Please note that for Access Control Schema roles are camel case. You can test it by setting in example role cook instead od Cook in file access-control-schema.xml and test it. Please change implementation of method getRoles to return appropriate list of roles.
* Run application and check if everything works. If there is a forbidden message for appropriate operations while for allowed you can execute theme.

. Try to achieve the same results using new method (ApplicationAccessControlConfig). Adjust this file appropriate and enable it just comment AccessControlProvider bean in class WebSecurityBeansConfig. Please note that convention naming of roles and permission is diffrent. Prefix with apllication name is added. So or replace annotations RolesAllowed to use current values or remove prefix.

. Instead of in memory authentication try to use database
* Create appropriate migration script which add accounts and roles
* Change method configureGlobal in class BaseUserDetailsService to use database.
