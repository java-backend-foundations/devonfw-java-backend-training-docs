:toc: macro
toc::[]

ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= Order Service - Security

In this chapter we are going to configure authentication and authorization for our services. We will learn how to create permission and roles, how to grant theme and how to apply these permissions to business logic.

== Basic configuration

Basic security configuration in application is already done. You can find interesting information's in following classes:
[source,java]
----
com.devonfw.app.java.order.general.service.impl.config.BaseWebSecurityConfig
com.devonfw.app.java.order.general.common.impl.security.BaseUserDetailsService
----

Please read these files carefully and try to understand what is configured there. Find out where users are defined, how they are stored and how are defined its roles (permissions).

== Authorization

Authorization can be implemented in multiple ways. Spring by default base on so called user roles. User has assigned some roles and based on theme we can allow/deny some functionality in our application. In many cases this is enough - but not always.

In devonfw authorization mechanism is extended. Execution of code is protected by a "permission". Individual permissions are assigned to roles in system. That way two different roles can have at the end the same permission and can run same code. Below you can find information how to create individual roles, permissions and how to create mapping between theme. 

=== Access Control Config
Roles and assigned to theme permission are configured directly in code of Application. In generated project basic configuration can be found under:
----
com.devonfw.app.java.order.general.common.api.security.ApplicationAccessControlConfig
----

For more details please see:
https://github.com/devonfw/devon4j/wiki/guide-access-control#access-control-config

== Exercises

. Basic configuration of authorization.

* Your first task is to create appropriate users in system and define proper roles to theme based on already implemented logic. Think about prepared use cases, users and what are they responsible for. After creation of users try to login for already created users.
* Next step is to configure permissions and assigned theme to created roles in system. To do that please adjust Access Control Config appropriately (class ApplicationAccessControlConfig). Remember about meaningful and correct naming.
** Don't forget to use inheritance of roles to avoid duplications.
* Now you are ready to protect your business logic. Grant access to the desired group of users putting *@RolesAllowed* annotation with appropriate permission in class *OrderserviceImpl*.
* Run application and check if everything works. You should receive a forbidden message for operations for which user has no permission. In other case it should be executed correctly.
+
TIP: In case of problems please look how users and its roles/authorities are configured and how these values are translated to actual permissions defined before. You can do it in class BaseWebSecurityConfig->configureGlobal (defining users) and BaseUserDetailsService->getRoles/getAuthorities. There might be a problem with PREFIX if it was used.

== Additional Exercises

. So far all data about users were held in memory. Now try to use database to hold your users. Adjust appropriate components to receive data from database during authentication.
* Create appropriate migration script which add users and roles (This can be skipped if you want to use default Spring database schema).
* Change method configureGlobal in class BaseUserDetailsService to use database.
* Verify that after addition of new user to database you can log in using new credentials.
+
. **Extend your application that user can use some custom header token or cookie value to authenticate under some new endpoint. You can base on JsonUsernamePasswordAuthenticationFilter to do that.
