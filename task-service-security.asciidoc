:toc: macro

= Task Service - Security

This chapter focuses on the security measures for our application, emphasizing authentication and the protection of our business logic based on user roles.

toc::[]

== Incorporating Necessary Dependency into Our Application

To utilize Spring Security, it's imperative to integrate security and its test module into our application. This can be achieved by adding the following XML configuration to the `pom.xml` file:

[source,xml]
----
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>

<dependency>
  <groupId>org.springframework.security</groupId>
  <artifactId>spring-security-test</artifactId>
</dependency>
----

Upon executing the application, accessing any endpoint should prompt the login screen. Additionally, a default user with the username *user* and a generated password can be found in the console. It's important to refresh the Maven model structure if any issues arise.

== Configuring Authentication

=== Creating a Security Configuration File and Basic SecurityFilterChain

* Develop a configuration class named `SecurityConfiguration`. This class will house beans utilized during authentication and authorization.
* Define a bean `SecurityFilterChain` with the following specifications:
** Allow anonymous access to the endpoints */user* adn */h2-console/***.
** Mandate authentication for all other endpoints.
** Display an auto-generated user page when not authenticated*.
** Logout endpoint exists.
** Additionally enable Basic Authentication to facilitate testing endpoints easily with Postman.
** Disable CSRF (for h2-console and testing purpose) and configure frame options to be able to use h2-console

[source,java]
----
                .csrf(AbstractHttpConfigurer::disable)
                .headers(customizer -> customizer
                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin))
----

* Establish a bean `UserDetailsService` with the following features:
** Operates in memory.
** Configures test users with selected usernames and passwords.
* Validate if the specified configurations function as intended.

[source,java]
----
@Configuration
public class SecurityConfiguration {
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // Implement this
    }
    
    @Bean
    public UserDetailsService userDetailsService() {
        // Implement this
    }
}
----

== Configuring Authorization

At the beginning add annotation *@EnableMethodSecurity* to security configuration class.

Please configure the following users:

* admin - with the role *ADMIN*.
* maintainer - with the role *MAINTAINER*.
* creator - with the role *CREATOR*.
* user - without any role.

Now, you are prepared to safeguard your business logic. Grant access to specific user groups by employing the appropriate `@PreAuthorize` annotation with the requisite permissions in your use case classes.

* *ADMIN* can create and remove persons.
* *MAINTAINER* can list persons and delete task lists.
* *CREATOR* can create and modify task lists and tasks.
* Users without any assigned role are permitted to read tasks and task lists.

You can define static fields and use them in annotations like

[source,java]
----
@Component("R")
public class AccessControl {

    public static String ROLE_ADMIN = "ADMIN";
    public static String ROLE_MAINTAINER = "MAINTAINER";

    // Implement
}
----

[source,java]
----
    @Override
    @PreAuthorize("hasRole(@R.ROLE_ADMIN)")
    public void deletePerson(@NotNull Long id) {

        personRepository.deleteById(id);
    }
----

Please verify the correctness of these configurations.

== Fix service test

Right now all service sest with RestController will not work. It is like that because right now to reach all endpoints there need to be authorized user. One of solution is to execute endpoints with some defined user. We will benefit from test library added in first step. See example below.

[source,java]
----
        mockMvc.perform(get("/person/")
                        .contentType(MediaType.APPLICATION_JSON)
                        .with(user("admin").password("admin").roles("ADMIN")))
                .andExpect(status().isOk()).andExpect(jsonPath("$[0].id").value(person.id()))
                .andExpect(jsonPath("$[0].email").value(person.email()));
----

== Optional Exercises (order is not relevant)

=== Storing Users in a Database

Up to this point, all user data has been stored in memory. Now, attempt to utilize a database to store user information. Adjust relevant components to retrieve data from the database during authentication.

* Create an appropriate migration script to add users and roles. Default schema can be found under *org/springframework/security/core/userdetails/jdbc/users.ddl*
* Replace the current `UserDetailsService` with one that interfaces with the database, such as *JdbcUserDetailsManager*.
* Ensure that after adding a new user to the database, logging in with the new credentials is possible.

=== Utilizing Current User Context

* Introduce a new endpoint to create a Person.
* Instead of relying on user-provided data, utilize the currently logged-in user for person details.
* For simplicity, assume that emails follow the format: `[username]@example.com`.

=== Implementing Fine-Grained Authorization

* Define more granular authorities to safeguard business logic. For example:
** CREATE_USER
** DELETE_USER
** ...
* Adjust the authorization of business logic to incorporate these new authorities.
* Establish a mapping of ROLE -> LIST_OF_AUTHORITIES. Develop a mechanism that, during authentication, resolves user roles and adds all corresponding authorities to the user.
