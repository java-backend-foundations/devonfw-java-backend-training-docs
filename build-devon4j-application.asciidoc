:toc: macro
toc::[]

= Build your own devon4j application

In this chapter we are going to show how to create a new _devon4j_ application from scratch. The app that we are going to create is _Order Service_, a simple to order items. You can read all the details of the app in the link:order-service[Order Service] page.

== Getting devonfw distribution

The recommended way to start developing _devon4j_ applications is to get the last `devon-ide` to have a _ready-to-start_ development environment.

You should get from your trainer instruction how to link:preparation.asciidoc[prepare] the environment.

Once the configuration is completed you will get the distribution's content.

image::images/devon/devon_dist.png[width="450", link="images/devon/devon_dist.png"]

== Prepare the workspace and initialize the distribution

Open a command shell of your choise (CMD, ConEMU, PowerShell, Windows Terminal, in the `workspaces\main` directory in your `devon-ide` installation and type)

[source,bash]
--------
$ devon
devonfw-ide environment variables have been set for C:\projects\jbf-training in workspace main
--------


== Clone the training repository

Please fork the repository https://github.com/java-backend-foundations/devonfw-java-backend-training into your Github account and clone it into `workspaces\main`. Therefore, run the following command in the console to change to the directory to `workspaces\school`

[source,bash]
--------
$ cd workspaces\main
$ git clone https://github.com/<github id>/devonfw-java-backend-training.git
$ cd devonfw-java-backend-training
--------

== Create the server project using the archetype

In order to create a new application, you must use the archetype provided by devon which uses the
maven archetype functionality.

There are two alternatives for using the archetype to create a new application. One is to create
using command line. Another way is within eclipse, which is a more visual manner.

=== Using the Command Line

To create a new application, you need to execute following commands:

[source,bash]
--------
$ mvn archetype:generate -DarchetypeVersion=3.0.1 -DarchetypeGroupId=com.devonfw.java.templates -DarchetypeArtifactId=devon4j-template-server -DgroupId=com.devonfw.app.java -DartifactId=order-service -Dversion=0.0.1-SNAPSHOT -Dpackage=com.devonfw.app.java.order -DdbType=h2
--------

This will create a new directory inside `workspaces\main\devonfw-java-backend-training` with the name of your application with the created application inside.

Compile the source using the `mvn` command

[source,bash]
--------
$ cd order-service
$ mvn clean install
--------

=== Using the Eclipse

To create a new application using Eclipse, you should have `devon-ide` installed. Please open command shell in `workspaces\main` and start Eclipse using

[source,bash]
--------
$ devon
devonfw-ide environment variables have been set for C:\projects\jbf-training in workspace main

devon eclipse
--------

Then, follow below steps to create a new application:

==== Step 1: Create new Maven project

Go to *`File > New > Maven Project`*. If you donâ€™t see the option, click *`File > New > Other`* and use the filter to search the option Maven Project

Set `workspaces\main\devonfw-java-backend-training\order-service` as the location

image::images/devon4j/3.BuildYourOwn/new-app-1.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-1.png"]

==== Step 2: Choose the archetype

In the *`New Maven Project`* wizard, you need to choose the `devon4j-template-server` archetype, as shown in below image. Please uncheck the option *`Show the last version of Aechetype only`* and chose the version *`3.0.1`* of the archetype.

image::images/devon4j/3.BuildYourOwn/new-app-2.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-2.png"]

[NOTE]
====
If you are not able to access the archetype, then try adding the archetype repository manually. You can do it with the _Configure_ button located next to the _Catalogs_ dropdown and then clicking the _Add Remote Catalog_ button. Finally, you need to add the repository _URL_ https://repo1.maven.org/maven2 and as _Description_ you can use _Maven Central_.

image::images/devon4j/3.BuildYourOwn/new-app-3.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-3.png"]

Use the _Verify_ button to check the connection. Subsequently, you will see a message with the amount of found archetypes.
====

==== Step 3: Configure the application properties
Fill the _Group Id_, _Artifact Id_, _Version_ and _Package_ for your project. Also in Properties available from archetype section update the _dbtype_ parameter

- _Group Id_: `com.devonfw.app.java`
- _Artifact Id_: `order-service`
- _Version_: `0.0.1-SNAPSHOT`
- _Package_: `com.devonfw.app.java.order`
- _dbtype_: `h2`

image::images/devon4j/3.BuildYourOwn/new-app-4.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-4.png"]

Click on the _Finish_ button and the project will be ready for execution.


== Import the app

[NOTE]
====
You can skip this step if you have created the project using the Eclipse. The project was automatically imported into Eclipse
====

As last step we can import the project we just created into the Eclipse IDE. Although our new _devon4j_ based app is still empty we are going to show how to run it with _Spring Boot_ simply to check that everything is ok.

Please open command shell in `workspaces\main` and start Eclipse (if not done yet) using 

[source,bash]
--------
$ devon
devonfw-ide environment variables have been set for C:\projects\jbf-training in workspace main

devon eclipse
--------


Now import our new project with *`File > Import`*.

Select *`Maven/Existing Maven Projects`*

image::images/devon4j/3.BuildYourOwn/new-app-5.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-5.png"]

Browse for the `order-service` directory. Next select the `api` and `core` projects (you will not need the other projects)

image::images/devon4j/3.BuildYourOwn/new-app-6.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-6.png"]

Click `Finish` and wait while the dependencies of the project are resolved to complete the import process.

== Empty app structure

Creating _devon4j_ based apps we get the following main features _out-of-the-box_:

* _Maven_ project with _api_ project, _core_ project and _server_ project:

** _api_ project for the common API

** _core_ project for the app implementation

** _server_ project ready to package the app for the deployment

image::images/devon4j/3.BuildYourOwn/devcon_devon4j_project_exp.PNG[ width="500", link="images/devon4j/3.BuildYourOwn/devcon_devon4j_project_exp.PNG"]


* Data base ready environment with an _h2_ instance
* Data model schema
* Mock data schema
* Database version control with Flyway

image::images/devon4j/3.BuildYourOwn/devcon_devon4j_flyway.PNG[ width="250", link="images/devon4j/3.BuildYourOwn/devcon_devon4j_flyway.PNG"]


* Bean mapper ready

image::images/devon4j/3.BuildYourOwn/emptyapp_beanmapper.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_beanmapper.png"]


* Basic security enabled (based on _Spring Security_)

image::images/devon4j/3.BuildYourOwn/emptyapp_security.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_security.png"]


* Unit test support and model

image::images/devon4j/3.BuildYourOwn/emptyapp_test.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_test.png"]


== Configure the project

Now let's change the _server context path_ of our application. Open `core/src/main/resources/config/application.properties` and set the `server.context-path` property to _/order-service_

[source,properties]
----
server.servlet.context-path=/order-service
----

[NOTE]
====
You can also change the port where the application will be available with the property `server.port`
====

The generated project is per default configured to use the H2 file database. Please change the configration to use the in-memory database. Please change replace following line

[source,properties]
----
spring.datasource.url=jdbc:h2:./.order-service;
----

with

[source,properties]
----
spring.datasource.url=jdbc:h2:mem:order-service
----



Please add the *`DevTools`* dependency into the `pom.xml` file of the _core_ project

[source,xml]
----
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-devtools</artifactId>
  <optional>true</optional>
</dependency>
----

*`DevTools`* provides Spring developers with some handy development-time tools. Among those are

- Automatic application restart when code changes
- Automatic browser refresh when browser-destined resources (such as templates, JavaScript, stylesheets, and so on) change
- Automatic disable of template caches
- Built in H2 Console if the H2 database is in use

[NOTE]
====
To be able to correctly display the H2 Console you need to perform small change in the Spring Security configuration. Please open the `BaseWebSecurityConfig` class and add following line

[source,java]
----
.headers().frameOptions().sameOrigin().and()
----
====

[NOTE]
====
The combination Devtools + Hibernate doesn't work correctly. Sometimes it ends with following error in the repositories

[source,java]
----
Caused by: java.lang.ClassCastException: com.devonfw.app.java.order.orderservice.dataaccess.api.ItemEntity$$EnhancerByCGLIB$$33fc0b29 cannot be cast to com.devonfw.app.java.order.orderservice.dataaccess.api.ItemEntity
    at com.devonfw.app.java.order.orderservice.dataaccess.api.repo.ItemRepository.findByNameLike(ItemRepository.java:94)
----

This problem can be fixed by adding a file `spring-devtools.properties` in `order-service-core/src/main/resources/META-INF` with following content

[source,java]
----
restart.include.all=.*
----
====

== Run the app

Finally, using _Spring Boot_ features (that provides us with an embedded Tomcat), we can run the app in an easy way. Look for the `SpringBootApp.java` class and click right button and select `Run As > Java Application`.

image::images/devon4j/3.BuildYourOwn/run.png[, link="images/devon4j/3.BuildYourOwn/run.png"]

If everything is ok you will see a messages in the _Console_ window like

----
2020-11-13 11:45:57.648  INFO 27448 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8081 (http) with context path '/order-service'
2020-11-13 11:45:57.651  INFO 27448 --- [  restartedMain] c.devonfw.app.java.order.SpringBootApp   : Started SpringBootApp in 12.141 seconds (JVM running for 14.109)
----

The app will be available at http://localhost:8081/order-service

image::images/devon4j/3.BuildYourOwn/login.png[, link="images/devon4j/3.BuildYourOwn/login.png"]

[NOTE]
====
You are redirected to the login screen because, by default, the new _devon4j_ applications provide a basic security set up.
====

Please use the `waiter/waiter` credentials to login. You should see following content

image::images/devon4j/3.BuildYourOwn/welcome.png[, link="images/devon4j/3.BuildYourOwn/welcome.png"]

== Simple `GET` call

The generated project provides under http://localhost:8081/order-service/services/rest/security/v1/currentuser a simple REST service to receive the current logged-in user. Try to call the service using _Postman_

image::images/devon4j/3.BuildYourOwn/simple-get-1.png[, link="images/devon4j/3.BuildYourOwn/simple-get-1.png"]

Instead of receiving the current user data we get a response with the login form. This is because the _devon4j_ applications, by default, implements the _Spring Security_ so we would need to log in using the log in form to access to the services.

To ease the example we are going to change the login method to _Http Basic Authentication_ and disable the _CSRF_ filter (otherwise you would need to send additional CSRF token with each writting operation)

In the file `BaseWebSecurityConfig.java` edit the `configure(HttpSecurity http)` method and replace following line:

[source,java]
----
.csrf().requireCsrfProtectionMatcher(new CsrfRequestMatcher()).and()
----
with
[source,java]
----
.csrf().disable().httpBasic().and()
----

Now run again the app and try again the same call. You should obtain the data of the current user

image::images/devon4j/3.BuildYourOwn/simple-get-2.png[, link="images/devon4j/3.BuildYourOwn/simple-get-2.png"]

== Open the H2 Console

During the training you will probably see the content of the database. Please open the H2 Console using following url http://localhost:8081/order-service/h2-console/ Please use the correct _JDBC URL_ you have configured previously.

[NOTE]
====
*`DevTools`* should automatically enable the H2 Console, but if you can't see it please add follwoing parameter to the `core/src/main/resources/config/application.properties` file

[source,java]
----
spring.h2.console.enabled=true
----
====


image::images/devon4j/3.BuildYourOwn/h2-console-login.png[, link="images/devon4j/3.BuildYourOwn/h2-console-login.png"]

After successful login you should see following content

image::images/devon4j/3.BuildYourOwn/h2-console.png[, link="images/devon4j/3.BuildYourOwn/h2-console.png"]

== Cobigen Health Check

We will generate some parts of the application using *`Cobigen`*. The first time we use *`Cobigen`*, it is recommended to check the health of the tool. To do so, right-click over an entity and select *`Update Templates...`* and next *`Health Check`*

image::images/devon4j/4.Components/cobigen0.png[width="750", link="images/devon4j/4.Components/cobigen0.png"]

The next dialogs will show us if there are outdated templates. In that case we can solve it clicking the *`Update`* button.

If you get following error, Eclipse needs the *`Cobigen`* templates to be imported. The simplest way is to click the *`Adapt Templates...`* button. *`Cobigen`* will download and import actually used templates.

image::images/devon4j/4.Components/cobigen2.png[width="350", link="images/devon4j/4.Components/cobigen2.png"]

Perform the health check again. You can also perform the advanced check.

image::images/devon4j/4.Components/cobigen_health1.png[width="350",link="images/devon4j/4.Components/cobigen_health1.png"]

image::images/devon4j/4.Components/cobigen_health2.png[width="350",link="images/devon4j/4.Components/cobigen_health2.png"]


=== link:devon4j-components.asciidoc[Next chapter: Add a component to your app]
