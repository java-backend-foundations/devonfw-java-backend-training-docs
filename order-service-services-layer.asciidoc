:toc: macro
toc::[]

= Order Service - Services Layer

In this chapter we are going to create service layer which exposes backend functionality. 

== Goal of exercise

The goal of this exercise is to define Rest services (API and implementation) together with proper subsystem test definition

== Service Layer definition

At first we have to define an interface for our Rest service facade. We start with definition of following the interface OrderserviceRestService located:

[source,java]
----
package com.devonfw.app.java.order.orderservice.service.api.rest
----

We define implementation respectively: OrderserviceRestServiceImpl in:

[source,java]
----
package com.devonfw.app.java.order.orderservice.service.impl.rest
----

Than we have to provide our implementation with proper annotations. On interface we define path of the service (including version), that will be concatenated with default rest service path. We define also contract which defines the type of exchanged data. For our case Json is fine:

[source,java]
----
@Path("/orderservice/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface OrderserviceRestService extends RestService {
----

Now we have to provide some CRUD logic for our service. For example if we’d like to expose some basic readById functionality we have to define a method annotated as follows:

[source,java]
----
	@GET
	@Path("/items/{name}")
	public Set <ItemEto> findItemByName(@PathParam("name") String name);
----

For a method defined in this way we are able to access following url using GET request:
[source,java]
----
http://localhost:8081/order-service/services/rest/orderservice/v1/items/dumplings
----


Please do so using an http client e.g. postman https://www.getpostman.com/
Please also define other functionality that has to be exposed in rest service, keeping in mind that if we’d like to exchange complex data, we don’t have to define input arguments as {pathVariable}. We can define it simply as method argument:

[source,java]
----
	@PUT
	@Path("/order/save/")
	public OrderCto saveOrder(OrderCto order);
----

Now we can implement our services. Restservice has to simply delegate business related actions to respective use cases. To do so, we only have to inject Orderservice component facade and delegate our logic to proper methods. For example:

[source,java]
----
@Override
public OrderCto saveOrder(OrderCto order) {
	return this.orderservice.saveOrder(order);
}
----
Also please keep in mind that our OrderserviceRestServiceImpl class has to be properly annotated:

[source,java]
----
@Named("OrderserviceRestService")
public class OrderserviceRestServiceImpl implements OrderserviceRestService {
----

== Testing of service layer

To properly test the implementation of rest service we have to define some subsystem tests. To do so please create test class OrderServiceRestTest located

[source,java]
----
com.devonfw.app.java.order.general.service.impl.rest
----

We shall also define some additional test configuration that allows us e.g. to use rest template or create some additional beans such as test helpers e.t.c. This step is optional, but it allows us to structurize our application a bit.

[source,java]
----
@Configuration
public class OrderServiceRestTestConfig {

  @Bean
  public OrderServiceRestTestHelper orderServiceRestTestHelper() {
    OrderServiceRestTestHelper orderServiceRestTestHelper = new OrderServiceRestTestHelper();
    return orderServiceRestTestHelper;
  }

  @Bean
  public RestTemplate restTemplate() {
    RestTemplate restTemplate = new RestTemplate();
    return restTemplate;
  }
}
----

Now we can complete annotations of our testclass:

[source,java]
----
@RunWith(SpringRunner.class)
@ContextConfiguration(classes = { SpringBootApp.class, OrderServiceRestTestConfig.class })
public class OrderServiceRestTest extends AbstractRestServiceTest {
----

Please notice that we extend class AbstractRestServiceTest (which extends SubsystemTest). This class provides some functionality e.g. DbTestHelper e.t.c.

[source,java]
----
@SpringBootTest(classes = { RestTestConfig.class,
SpringBootApp.class }, webEnvironment = WebEnvironment.RANDOM_PORT)
public abstract class AbstractRestServiceTest extends SubsystemTest {


  @LocalServerPort
  protected int port;


  @Inject
  private DbTestHelper dbTestHelper;

  @Override
  protected void doSetUp() {

    super.doSetUp();
  }

  @Override
  protected void doTearDown() {

    super.doTearDown();
  }

  public DbTestHelper getDbTestHelper() {

    return this.dbTestHelper;
  }
----

After such definition of OrderServiceRestTest we should be able to simply inject some dependencies and perform the simplest tests:
[source,java]
----
@RunWith(SpringRunner.class)
@ContextConfiguration(classes = { SpringBootApp.class, OrderServiceRestTestConfig.class })
public class OrderServiceRestTest extends AbstractRestServiceTest {

	@Inject
	private OrderServiceRestTestHelper helper;

	@Inject
	private OrderserviceRestService service;

	@Inject
	private DbTestHelper dbTestHelper;

	@Inject
	private Orderservice orderservice;

	@Inject
	private CustomerRepository customerRepository;

	@Override
	public void doSetUp() {
		super.doSetUp();
		dbTestHelper.resetDatabase();
	}

	@Override
	public void doTearDown() {
		this.service = null;
		super.doTearDown();
	}

	@Test
	public void shouldFindItemByName() {
		// given
		OrderCto order = this.helper.createDummyOrderCTO();
		this.service.saveOrder(order);
		// when
		Set<ItemEto> items = this.service.findItemByName(ItemTestData.CORN_NAME);
		// then
		assertThat(items).hasSize(1);
		assertThat(items.iterator().next().getName()).isEqualTo(ItemTestData.CORN_NAME);
	}
----
More about testing: https://github.com/devonfw/devon4j/wiki/guide-testing


=== link:order-service-security.asciidoc[Next chapter: Order Service - Security]
