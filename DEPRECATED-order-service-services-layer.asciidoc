:toc: macro
toc::[]

= Order Service - Services Layer

In this chapter we are going to create service layer which exposes backend functionality. 

== Goal of exercise

The goal of this exercise is to define Rest services (API and implementation) together with proper subsystem test definition

== Service Layer definition

At first we have to define an interface for our Rest service facade. We start with definition of following interface OrderserviceRestService located in `order-service-api`:

[source,java]
----
package com.devonfw.app.java.order.orderservice.service.api.rest
----

We define implementation respectively (in `order-service-core`): OrderserviceRestServiceImpl in:

[source,java]
----
package com.devonfw.app.java.order.orderservice.service.impl.rest
----

Than we have to provide our implementation with proper annotations. On interface we define path of the service (including version), that will be concatenated with default rest service path. We define also contract which defines the type of exchanged data. For our case Json is fine:

[source,java]
----
@Path("/orderservice/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface OrderserviceRestService extends RestService {
----

Now we have to provide some CRUD logic for our service. For example if we’d like to expose some basic readById functionality we have to define a method annotated as follows:

[source,java]
----
	@GET
    @Path("/item/{id}/")
    public ItemEto getItem(@PathParam("id") long id);
----

For a method defined in this way we are able to access following url using GET request:

[source,java]
----
http://localhost:8081/order-service/services/rest/orderservice/v1/item/23
----

Please use an http client e.g. postman https://www.getpostman.com/ to test the service (after implementing it)

image::images/devon4j/11.Services/postman-get-item.png[width="750", link="images/devon4j/11.Services/postman-get-item.png"]

Please also define other functionality that has to be exposed in rest service, keeping in mind that if we’d like to exchange complex data, we don’t have to define input arguments as {pathVariable}. We can define it simply as method argument:

[source,java]
----
  @POST
  @Path("/item/")
  public ItemEto saveItem(ItemEto item);
----

You can test it later using _Postman_

image::images/devon4j/11.Services/postman-post-item.png[width="750", link="images/devon4j/11.Services/postman-post-item.png"]

You can also implement functionality to search item by search criteria

[source,java]
----
  @Path("/item/search")
  @POST
  public Page<ItemEto> findItems(ItemSearchCriteriaTo searchCriteriaTo);
----

For a method defined in this way we are able to access following url using POST request:

[source,java]
----
http://localhost:8081/order-service/services/rest/orderservice/v1/item/search
----

image::images/devon4j/11.Services/postman-item-search-1.png[width="750", link="images/devon4j/11.Services/postman-item-search-1.png"]

image::images/devon4j/11.Services/postman-item-search-2.png[width="750", link="images/devon4j/11.Services/postman-item-search-2.png"]


Now we can implement our services. Restservice has to simply delegate business related actions to respective use cases. To do so, we only have to inject Orderservice component facade and delegate our logic to proper methods. For example:

[source,java]
----
  @Override
  public ItemEto saveItem(ItemEto item) {
    return this.orderservice.saveItem(item);
  }
----
Also please keep in mind that our OrderserviceRestServiceImpl class has to be properly annotated:

[source,java]
----
@Named("OrderserviceRestService")
public class OrderserviceRestServiceImpl implements OrderserviceRestService {
----

Please generate the service layer for Customer using _Cobigen_. Try to implement more complicated services returning complete Orders as `OrderCTO`, like

[source,java]
----
  @Path("/order/search")
  @POST
  public Page<OrderCto> findOrders(OrderSearchCriteriaTo searchCriteriaTo);
----

Generate the `OrderCTO` if necessary. 

The service can be tested using POST request 

[source,java]
----
http://localhost:8081/order-service/services/rest/orderservice/v1/order/search
----

Test the service using _Postman_

image::images/devon4j/11.Services/postman-order-search.png[width="750", link="images/devon4j/11.Services/postman-order-search.png"]


== Testing of service layer

To properly test the implementation of rest service we have to define some subsystem tests. To do so please create test class OrderServiceRestTest located

[source,java]
----
com.devonfw.app.java.order.general.service.impl.rest
----

Plese extend the existing `RestServiceTest` class

[source,java]
----
public class OrderserviceRestServiceImplTest extends RestServiceTest {

----

To be able to call the REST service we you need to define a client proxy. Please implement a method creating the proxy using the `ServiceClientFactory`

[source,java]
----
private OrderserviceRestService getOrderService() {

    String login = "admin";
    String password = "admin";
    OrderserviceRestService orderService = getServiceClientFactory().create(OrderserviceRestService.class,
        new ServiceClientConfigBuilder().host("localhost").authBasic().userLogin(login).userPassword(password)
            .buildMap());
    return orderService;
  }
----

You need also to add following dependency in the `pom.xml` of the `core` project

[source,xml]
----
<dependency>
  <groupId>com.devonfw.java.starters</groupId>
  <artifactId>devon4j-starter-cxf-client-rest</artifactId>
</dependency>
----

It enables creation of the client factory using the Apache CXF framework.

You can now test your services using the created proxy

[source,java]
----
  @Test
  void shouldFindItem() {

    OrderserviceRestService orderService = getOrderService();

    ItemSearchCriteriaTo searchCriteriaTo = new ItemSearchCriteriaTo();
    searchCriteriaTo.setName("tacos");

    Page<ItemEto> items = orderService.findItems(searchCriteriaTo);
    assertThat(items.getNumberOfElements()).isEqualTo(1);
    assertThat(items.getContent().get(0).getName()).isEqualTo("tacos");

  }
----

Please implement tests for some of services you have implemented.

More about testing: https://github.com/devonfw/devon4j/wiki/guide-testing


=== link:order-service-security.asciidoc[Next chapter: Order Service - Security]
